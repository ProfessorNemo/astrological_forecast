exit
учше
types[@type.strip.downcase.capitalize].nil?
types[@type].nil?
types[@type]
types[@type.strip.downcase.capitalize]
types
types.invert[@type.strip.downcase.capitalize]
types.invert
types
@type
exit
raise IncorrectDate unless @date.match?(/\A(\d{2})\.(\d{2})\z/)
exit
raise IncorrectDate
IncorrectDate
AstrologicalForecast:Errors
AstrologicalForecast
AstrologicalForecast::IncorrectDate
raise AstrologicalForecast::IncorrectDate unless @date.match?(/\A(\d{2})\.(\d{2})\z/)
exit
raise AstrologicalForecast::DefinitionSign::IncorrectDate unless @date.match?(/\A(\d{2})\.(\d{2})\z/)
raise AstrologicalForecast::IncorrectDate unless @date.match?(/\A(\d{2})\.(\d{2})\z/)
exit
raise IncorrectDate unless @date.match?(/\A(\d{2})\.(\d{2})\z/)
exit
@date.match?(/\A(\d{2})\.(\d{2})\z/)
raise IncorrectDate unless @date.match?(/\A(\d{2})\.(\d{2})\z/)
n
exit
 periods[@period]
exit
periods
 periods[@period]
exit
types[@type]
exit
'На сегодня'.strip.downcase
'На сегодня'.strip.downcase.capitalize
'На сегодня'.strip
%w[Общий Любовный Семейный Карьерный Здоровье Тинейджер Флирт Друзья]
$stdin.gets.to_i
'  ghg'.strip
types[@type]
types
types['@type']
@type.strip.downcase.capitalize == @type
@type.strip.downcase.capitalize == "Общий"
@type.strip.downcase.capitalize == "ОбщийЭ
@type.strip.downcase.capitalize
@type.downcase.capitalize
@type.downcase.capitilize
@type.downcase
@type
type
@type
types
exit
types
exit
types
exit
@data.match?(/\A(\d{2})\.(\d{2})\z/)exit
@data.match?(/\A(\d{2})\.(\d{2})\z/)
@date
exit
"13.3".match? /\A(\d{2})\.(\d{2})\zучше/
"13.3".match? /\A(\d{2})\.(\d{2})\z/
"13.03".match? /\A(\d{2})\.(\d{2})\z/
"13.03".match? /(\d{2})\.(\d{2})\z/
"13.03.".match? /(\d{2})\.(\d{2})\z/
"13.03.".match? /(\d{2})\.(\d{2})/
"13.03".match? /(\d{2})\.(\d{2})/
"13.03".match? /\d{2}\d{2}/
"13.03.".match? /\d{2}\d{2}/
"13.03.234r".match? /\d{2}\d{2}/
"13.03.234r".match? /\d{2}\d{,2}/
"13.03.234r".match? /\d{,1}\d{,2}/
"13.03.".match? /\d{,1}\d{,2}/
"13.03.".match? /\d{,2}\d{,2}/
"13.03".match? /\d{,2}\d{,2}/
"13.03".match? /\d+/
AstrologicalForecast::Facts::TYPES
AstrologicalForecast::Facts.give_types[0]
AstrologicalForecast::Facts.give_types['Общий']
AstrologicalForecast::Facts.give_types
exit
AstrologicalForecast::Facts.give_types.class
AstrologicalForecast::Facts.give_types
